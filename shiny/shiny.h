#ifndef SHINY_H_
#define SHINY_H_

#include <stdint.h>


/* CONSTANTS, STRUCTURES, ENUMS */

typedef struct ivs {
	uint8_t def;
	uint8_t atk;
	uint8_t hp;
	uint8_t sdef;
	uint8_t satk;
	uint8_t spe;
} ivs_t;

typedef struct pkmn {
	uint32_t pid;
	ivs_t ivs;
} pkmn_t;

typedef enum gender {
	IGNORE_GENDER,
	MALE,
	FEMALE
} gender_t;

// user-defined variables
typedef struct config {
	int8_t a_f_add;				// will be added to a_f
	int8_t b_f_add;				// will be added to b_f
	
	uint32_t a;					// A := #(tid_f, a_f]
	
	uint32_t l;					// lower bound L, s.t. L <= pid_r
	uint32_t u;					// upper bound U, s.t. pid_r <= U
	
	uint8_t pid_r_threshold; 	// number of frames to show before and after the frame b_f in table
	
	// variables which define properties of the desired Pokemon
	uint32_t search_natures;	// i-th bit is 1 <=> NATURES[i] is searched for (from right to left)
	uint8_t search_shiny;	 	// 1: true, 0: false
	gender_t search_gender;		
	ivs_t search_min_ivs;		
} config_t;

static const uint16_t TID_F = 25U;
static const uint16_t B_F_SUB = 11U;
#ifdef LANG_DE	
	static const uint16_t SID_R_ADD = 233U;

	static const char * const NATURES[25] = {"Robust", "Solo", "Mutig", "Hart", "Frech", "Kuehn", "Sanft", "Locker", "Pfiffig", "Lasch", "Scheu", "Hastig", "Ernst", "Froh", "Naiv", "Maessig", "Mild", "Ruhig", "Zaghaft", "Hitzig", "Still", "Zart", "Forsch", "Sacht", "Kauzig"};
#elif  LANG_US
	static const uint16_t SID_R_ADD = 274U;

	static const char * const NATURES[25] = {"Hardy", "Lonely", "Brave", "Adamant", "Naughty", "Bold", "Docile", "Relaxed", "Impish", "Lax", "Timid", "Hasty", "Serious", "Jolly", "Naive", "Modest", "Mild", "Quiet", "Bashful", "Rash", "Calm", "Gentle", "Sassy", "Careful", "Quirky"};
#endif


/* CALC FUNCTIONS */

// random number generator used by LeafGreen/FireRed
uint32_t lcrng(uint32_t seed);

// returns the pkmn_t which is generated by the lcrng on the given seed
pkmn_t pkmn(uint32_t seed);

// returns SID based on the given TID and conf->a
uint16_t sid(const config_t *conf, uint16_t tid);

// returns 1 if Pokemon with PID pid will be shiny for TID tid and SID sid, otherwise 0
uint8_t is_shiny(uint32_t pid, uint16_t tid, uint16_t sid);


/* GRAPHICAL OUTPUT FUNCTIONS */

// prints a table with (2*conf->pid_r_threshold + 1) lines which contains properties of Pokemon
// let i be the i-th line (begin at 0)
// the i-th line will contain the properties of the Pokemon produced by the seed of the i-th invocation of the lcrng (initially seeded with seed)
void print_table(const config_t *conf, uint16_t tid, uint16_t sid, uint32_t seed, uint32_t first_frame);


/* CORE FUNCTIONS */

// searches for first pid_r in [L, U] which produces a Pokemon which has all user-defined properties
// returns 0 if such a pid_r was not found in [L, U], otherwise 1
// if this function has returned 1, 
//	*pid_r will contain the pid_r which was searched for, 
//	*table_seed will contain the seed which produces the Pokemon on frame pid_r-conf->pid_r_threshold 
uint8_t find_pid_r(const config_t *conf, uint16_t tid, uint16_t sid, uint32_t *pid_r, uint32_t *table_seed);

// prints a_f, b_f and a table which contains Pokemon at frame pid_r and adjacend frames for a given config_t
void shiny(config_t *conf);


#endif 